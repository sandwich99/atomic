




$text-color:            rgba(#000, .87);
$text-muted:            rgba(#000, .54);
$text-hint:             rgba(#000, .26);
$color-divider:         rgba(#000, .12);

//font color
.text {
    color: $text-color;
}

.muted {
    color: $text-muted;
}

.hint {
    color: $text-hint;
}

.l {
    float: left;
}

.r {
    float: right;
}

//offset margin and padding

@mixin computed-for-offset($propertyName, $shorthand, $value) {

    $attr: $propertyName;
    $pixels: #{$value}px;
    $attrsList: null;

    // 使用双重list处理
    @if $attr != null {
        $attrsList: (
           (#{$shorthand}#{$value}, '#{$propertyName}'),
           (#{$shorthand}t#{$value}, '#{$propertyName}-top'),
           (#{$shorthand}l#{$value}, '#{$propertyName}-left'),
           (#{$shorthand}b#{$value}, '#{$propertyName}-bottom'),
           (#{$shorthand}r#{$value}, '#{$propertyName}-right')
        );
    }

    @each $className, $attributeName in $attrsList {

        .#{$className} {
            #{$attributeName}: $pixels;
        }
    }
}

@mixin offset-for-property($name, $shorthand) {

    @for $i from 1 through 9 {
        @include computed-for-offset($name, $shorthand, $i);
        @include computed-for-offset($name, $shorthand, $i * 10);
        // margin 具有负值
        @if $name == margin {
            @include computed-for-offset($name, $shorthand, 0 - $i);
        }
    }
}

//margin
@include offset-for-property(margin, m);
//padding
@include offset-for-property(padding, p);

// display 属性
@each $class, $attr in (db: block, di: inline, dib: inline-block, df: flex) {
    .#{$class} {
        display: $attr;
    }
}




// border
.bd-divider {
    border: 1px solid $color-divider;
}

.bdb-divider {
    border-bottom: 1px solid $color-divider;
}


@mixin make-map-property($property, $shorthand, $colorsMap) {

    @each $color, $value in $colorsMap {

        .#{$shorthand}-#{$color} {
            #{$property}: $value;
        }
    }
}

@mixin compute-dimension-property($property, $shorthand, $min, $max, $multiple: 1) {

    .#{$shorthand}0 {
        #{$property}: 0;
    }
    // line-height font-size
    @for $i from $min through $max {
        $size: $i;

        .#{$shorthand}#{$size} {
            #{$property}: #{$size}px;
        }

    }
}


@include compute-dimension-property(line-height, lh, 12, 50);
@include compute-dimension-property(font-size, f, 12, 50);
// @include compute-dimension-property(margin, m, 1, 10); //margin
// @include compute-dimension-property(margin, m-, 1, 10, -1); //margin 负值
// @include compute-dimension-property(margin-top, mt, 1, 10, -1);
// @include compute-dimension-property(margin-right, mr, 1, 10, -1);
// @include compute-dimension-property(margin-bottom, mb, 1, 10, -1);
// @include compute-dimension-property(margin-left, ml, 1, 10, -1);
// @include compute-dimension-property(font-size, f, 12, 50);







